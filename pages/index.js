import { useState, useEffect } from "react";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import {
  getGithubPreviewProps,
  parseJson,
  parseMarkdown,
  getGithubFile,
} from "next-tinacms-github";
import { GetStaticProps } from "next";
import { useForm, usePlugin, useCMS } from "tinacms";
import {
  useGithubJsonForm,
  useGithubMarkdownForm,
  useGithubToolbarPlugins,
  useGithubFile,
} from "react-tinacms-github";

import Markdown from "react-markdown";

import { toMarkdownString } from "next-tinacms-markdown";
import { InlineWysiwyg } from "react-tinacms-editor";
import { InlineForm, InlineText } from "react-tinacms-inline";
import useSWR from "swr";

export function getList(rurl) {
  const url = `http://localhost:5001/static?url=${rurl}`;
  const head = { "x-api-key": "0fQZGotbb72kCoDBJuDxI2h86cPdybzs4zmcU4hz" };

  return fetch(url, { method: "GET", headers: head }).then((data) =>
    data.text()
  );
}

const f = {
  fileRelativePath: "",
  staticContentUrl: "",
  data: "",
};

const myForm = (preview, fileList) => {
  /* const [data, setData] = useState({}); */
  /* console.log(fileList); */
  const formConfig = {
    id: "myForm",
    fields: fileList,
    loadInitialValues: async () => {
      if (preview) {
        async function y() {
          return { first: "bbb", second: "rsats" };
        }
        return await y();
        /* return new Promise(function (resolve, reject) { */
        /* <!--  --> */
        /* const x = { first: "bbb", second: "rsats" }; */
        /* resolve(x); */

        /* }); */
      }
      async function x() {
        let arr = {};
        for (const item of fileList) {
          const resp = await fetch(item.file.staticContentUrl);
          const txt = await resp.text();
          arr[item.file.name] = txt;
        }
        return arr;
      }
      return await x();
    },
    onSubmit: async () => {},
  };
  return useForm(formConfig);
};
export default function Home(props) {
  const cms = useCMS();
  const [data, form, loading] = myForm(props.preview, props.files);
  usePlugin(form);
  useGithubToolbarPlugins();

  if (loading) return <div>loading</div>;

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div>
          <InlineForm form={form}>
            <InlineWysiwyg name="data.first" format="markdown">
              <Markdown>{data.first}</Markdown>
            </InlineWysiwyg>
          </InlineForm>
        </div>
        <button
          onClick={() => {
            cms.toggle();
          }}
        >
          {cms.enabled ? "Exit Edit Mode" : "Edit This Site"}
        </button>
      </main>
    </div>
  );
}

export async function getStaticProps({ preview, previewData }) {
  if (preview) {
    const first = await getGithubPreviewProps({
      ...previewData,
      fileRelativePath: "content/new.md",
      parse: parseMarkdown,
    });
    const second = await getGithubPreviewProps({
      ...previewData,
      fileRelativePath: "content/other.md",
      parse: parseMarkdown,
    });
    return {
      props: {
        preview: true,
        files: [
          { ...first.props.file, name: "first" },
          { ...second.props.file, name: "second" },
        ],
      },
    };
  }

  const stub = {
    file: {
      data: {
        markdownBody: "a",
        frontmatter: "a",
      },
      name: "first",
      fileRelativePath: "a",
      staticContentUrl: "http://localhost:5001/static?url=first",
    },
  };
  const stub2 = {
    file: {
      data: {
        markdownBody: "b",
        frontmatter: "b",
      },
      name: "second",
      fileRelativePath: "b",
      staticContentUrl: "http://localhost:5001/static?url=second",
    },
  };
  return { props: { preview: false, files: [stub, stub2] } };
}
