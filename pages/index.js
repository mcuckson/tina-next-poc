import React from "react";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { getGithubPreviewProps, parseJson } from "next-tinacms-github";
import { GetStaticProps } from "next";
import { usePlugin, useForm, useCMS } from "tinacms";
import {
  useGithubClient,
  useGithubJsonForm,
  useGithubToolbarPlugins,
} from "react-tinacms-github";

import ReactMarkdown from "react-markdown";
import { InlineWysiwyg } from "react-tinacms-editor";
import { InlineForm, InlineText } from "react-tinacms-inline";
import useSWR from "swr";

export default function Home() {
  const cms = useCMS();
  const github = useGithubClient();

  async function getStatic() {
    const url =
      "https://x68jj3oe7e.execute-api.eu-west-2.amazonaws.com/test/gitsynctest/README.md";
    const head = { "x-api-key": "0fQZGotbb72kCoDBJuDxI2h86cPdybzs4zmcU4hz" };
    const f = await fetch(url, { method: "GET", headers: head });
    const d = await f.text();
    return { body: d };
  }

  async function getDynamic() {
    const request = await github.fetchFile("/README.md");
    return { body: request.content };
  }

  const formOptions = {
    label: "Home Page",
    fields: [{ name: "title", component: "text" }],
  };
  const [data, form, loading] = useForm({
    loadInitialValues() {
      return getStatic();
    },
    onSubmit: async function (formData) {
      alert(formData.body);
    },
  });

  usePlugin(form);
  useGithubToolbarPlugins();

  const asyncFunc = () => {
    cms.toggle();
    if (cms.enabled) {
      data.body = "aaa";
    }
    github.fetchFile("/README.md").then((x) => {
      data.body = x.content;
      console.log(data.body);
    });
  };

  const asyncFunc2 = async () => {
    let promise = new Promise((resolve, reject) => {
      setTimeout(() => resolve("I am a done promise!"), 3000);
    });

    let result = await promise;

    alert(result);
  };

  const EditLink = (props) => {
    return (
      <button onClick={asyncFunc}>
        {cms.enabled ? "Exit Edit Mode" : "Edit This Site"}
      </button>
    );
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        {loading ? (
          <div>loading</div>
        ) : (
          <React.Fragment>
            <InlineForm form={form}>
              <InlineWysiwyg name="body" format="markdown">
                <ReactMarkdown>{data.body}</ReactMarkdown>
              </InlineWysiwyg>
            </InlineForm>
            <EditLink />
          </React.Fragment>
        )}
      </main>
    </div>
  );
}

/* export async function getStaticProps({
 *  preview,
 *  previewData,
 * })
 * {
 *  if (preview) {
 *    return getGithubPreviewProps({
 *      ...previewData,
 *      fileRelativePath: 'content/home.json',
 *      parse: parseJson,
 *    })
 *  }
 *  return {
 *    props: {
 *      sourceProvider: null,
 *      error: null,
 *      preview: false,
 *      file: {
 *        fileRelativePath: 'content/home.json',
 *        data: (await import('../content/home.json')).default,
 *      },
 *    },
 *  }
 * } */
