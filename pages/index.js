import { useState, useEffect } from "react";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import {
  getGithubPreviewProps,
  parseJson,
  parseMarkdown,
  getGithubFile,
} from "next-tinacms-github";
import { GetStaticProps } from "next";
import { useForm, usePlugin, useCMS } from "tinacms";
import {
  useGithubJsonForm,
  useGithubMarkdownForm,
  useGithubToolbarPlugins,
  useGithubFile,
} from "react-tinacms-github";

import Markdown from "react-markdown";

import { toMarkdownString } from "next-tinacms-markdown";
import { InlineWysiwyg } from "react-tinacms-editor";
import { InlineForm, InlineText } from "react-tinacms-inline";
import useSWR from "swr";

export function getList(rurl) {
  const url = `http://localhost:5001/static?url=${rurl}`;
  const head = { "x-api-key": "0fQZGotbb72kCoDBJuDxI2h86cPdybzs4zmcU4hz" };

  return fetch(url, { method: "GET", headers: head }).then((data) =>
    data.text()
  );
}

const f = {
  fileRelativePath: "",
  staticContentUrl: "",
  data: "",
};

const myForm = (preview, fileList) => {
  /* const [data, setData] = useState({}); */
  console.log(fileList);
  const formConfig = {
    id: "myForm",
    fields: fileList,
    loadInitialValues() {
      if (preview) {
        return new Promise(function (resolve, reject) {
          const x = { bb: "bbb" };
          resolve(x);
        });
      }
      const url = `http://localhost:5001/static?url=first}`;
      return fetch(url)
        .then((response) => response.text())
        .then((res) => {
          /* setData(res); */
          return { bb: res };
        });
    },
    onSubmit: async () => {},
  };
  return useForm(formConfig);
};

const useGithubMultiFileForm = (file, options) => {
  const githubFile = useGithubFile({
    path: file.fileRelativePath,
    serialize: toMarkdownString,
  });

  const [formData, form] = useForm({
    id: file.fileRelativePath,
    label: options.label || file.fileRelativePath,
    initialValues: file.data,
    loadInitialValues: async () => {
      console.log(file);
      if (options.preview) return file.data;
      const url = `http://localhost:5001/static?url=first}`;
      const head = { "x-api-key": "0fQZGotbb72kCoDBJuDxI2h86cPdybzs4zmcU4hz" };
      const resp = await fetch(url, { method: "GET", headers: head });
      const txt = await resp.text();
      return { markdownBody: txt };
    },
    fields: options.fields || [],
    actions: options.actions || [],
    onSubmit(formData) {
      return githubFile.commit(formData);
    },
  });

  return [formData || file.data, form];
};

function GenericMd({ props }) {
  const { preview, file, rurl } = props;
  const cms = useCMS();
  const [state, setState, loading] = useState({});
  const [data, form] = useGithubMultiFileForm(file, { preview: props.preview }); //, { id: rurl });
  usePlugin(form);
  useGithubToolbarPlugins();
  if (loading) return <div>loading</div>;
  return (
    <InlineForm form={form}>
      <InlineWysiwyg name="markdownBody" format="markdown">
        {/* <Markdown>{preview ? data.markdownBody : state.data}</Markdown> */}
        <ReactMarkdown source={data.markdownBody} />
        {/* <Markdown>{"rrr"}</Markdown> */}
      </InlineWysiwyg>
    </InlineForm>
  );
}

export default function Home(props) {
  const cms = useCMS();
  const [data, form, loading] = myForm(props.preview, props.files);
  usePlugin(form);
  useGithubToolbarPlugins();

  if (loading) return <div>loading</div>;

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div>
          <InlineForm form={form}>
            <InlineWysiwyg name="bb" format="markdown">
              {/* <Markdown>{preview ? data.markdownBody : state.data}</Markdown> */}
              {/* <ReactMarkdown source={data.bb} /> */}
              {/* <Markdown>{data.bb}</Markdown> */}
              <Markdown>{data.bb}</Markdown>
            </InlineWysiwyg>
          </InlineForm>

          {/* <GenericMd
              props={{
              preview: props.preview,
              file: props.files.first,
              rurl: "first",
              }}
              />
              <GenericMd
              props={{
              preview: props.preview,
              file: props.files.second,
              rurl: "second",
              }}
              /> */}
        </div>
        <button
          onClick={() => {
            cms.toggle();
          }}
        >
          {cms.enabled ? "Exit Edit Mode" : "Edit This Site"}
        </button>
      </main>
    </div>
  );
}

export async function getStaticProps({ preview, previewData }) {
  if (preview) {
    const first = await getGithubPreviewProps({
      ...previewData,
      fileRelativePath: "content/new.md",
      parse: parseMarkdown,
    });
    const fFixed = { first };
    const second = await getGithubPreviewProps({
      ...previewData,
      fileRelativePath: "content/other.md",
      parse: parseMarkdown,
    });
    return {
      props: {
        preview: true,
        files: [first.props.file, second.props.file],
      },
    };
  }

  const stub = {
    file: {
      data: {
        markdownBody: "a",
        frontmatter: "a",
      },
      fileRelativePath: "a",
      staticContentUrl: "a",
    },
  };
  const stub2 = {
    file: {
      data: {
        markdownBody: "b",
        frontmatter: "b",
      },
      fileRelativePath: "b",
      staticContentUrl: "b",
    },
  };
  return { props: { preview: false, files: [stub, stub2] } };
}
