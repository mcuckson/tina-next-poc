import { useState } from "react";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import {
  getGithubPreviewProps,
  parseJson,
  parseMarkdown,
} from "next-tinacms-github";
import { GetStaticProps } from "next";
import { usePlugin, useCMS } from "tinacms";
import {
  useGithubJsonForm,
  useGithubMarkdownForm,
  useGithubToolbarPlugins,
} from "react-tinacms-github";

import Markdown from "react-markdown";
import { InlineWysiwyg } from "react-tinacms-editor";
import { InlineForm, InlineText } from "react-tinacms-inline";
import useSWR from "swr";

function GenericMd({ props }) {
  const { preview, file, rurl } = props;
  const cms = useCMS();
  const [state, setState] = useState({});
  const [data, form] = useGithubMarkdownForm(file);
  if (!preview && !state.data) {
    const url = `http://localhost:5001/static?url=${rurl}`;
    const head = { "x-api-key": "0fQZGotbb72kCoDBJuDxI2h86cPdybzs4zmcU4hz" };

    fetch(url, { method: "GET", headers: head })
      .then((x) => x.text())
      .then((y) => {
        setState({ data: y });
      });
  }
  usePlugin(form);
  useGithubToolbarPlugins();
  console.log(file);
  return (
    <InlineForm form={form}>
      <InlineWysiwyg name="markdownBody" format="markdown">
        <Markdown>{preview ? data.markdownBody : state.data}</Markdown>
      </InlineWysiwyg>
    </InlineForm>
  );
}

export default function Home(props) {
  const cms = useCMS();
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1>
          <GenericMd
            props={{
              preview: props.preview,
              file: props.files.first,
              rurl: "first",
            }}
          />
        </h1>
        <button
          onClick={() => {
            cms.toggle();
          }}
        >
          {cms.enabled ? "Exit Edit Mode" : "Edit This Site"}
        </button>
      </main>
    </div>
  );
}

export async function getStaticProps({ preview, previewData }) {
  if (preview) {
    const first = await getGithubPreviewProps({
      ...previewData,
      fileRelativePath: "content/new.md",
      parse: parseMarkdown,
    });
    const second = await getGithubPreviewProps({
      ...previewData,
      fileRelativePath: "content/other.md",
      parse: parseMarkdown,
    });
    return {
      props: {
        preview: true,
        files: { first: first.props.file, second: second.props.file },
      },
    };
  }

  const stub = {
    file: {
      data: {
        markdownBody: "",
      },
    },
  };
  return { props: { preview: false, files: { first: stub, second: stub } } };
}
